<?php
// $Id$


module_load_include('inc', 'crumbs', 'crumbs.api');

module_load_include('inc', 'crumbs', 'crumbs.menu');
module_load_include('inc', 'crumbs', 'crumbs.taxonomy');
module_load_include('inc', 'crumbs', 'crumbs.path');
module_load_include('inc', 'crumbs', 'crumbs.pathauto');
module_load_include('inc', 'crumbs', 'crumbs.node');
module_load_include('inc', 'crumbs', 'crumbs.crumbs');

function crumbs_perm() {
  return array('administer crumbs');
}


function crumbs_menu() {
  $items = array();
  $items['crumbs/node-type-dummy-path/%'] = array(
    'title' => 'Crumbs dummy path',
    'title callback' => 'check_plain',
    'page callback' => '_crumbs_donothing',
    'access callback' => '_crumbs_noaccess',
  );
  $items['admin/build/crumbs'] = array(
    'title' => 'Crumbs',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crumbs_admin_form'),
    'access arguments' => array('administer crumbs'),
    'file' => 'crumbs.admin.inc',
  );
  return $items;
}


function _crumbs_donothing() {
  return '';
}

function _crumbs_noaccess() {
  return TRUE;
}


function crumbs_init() {
  $item = menu_get_item();
  $link_path = $item['href'];
  $trail = crumbs_build_trail($link_path, TRUE);
  _crumbs_set_trail($trail);
  $breadcrumb = crumbs_build_breadcrumb($trail);
  _crumbs_set_breadcrumb($breadcrumb);
  drupal_set_breadcrumb($breadcrumb);
}


function crumbs_build_breadcrumb($trail) {
  $breadcrumb = array();
  foreach ($trail as $path => $item) {
    $breadcrumb[] = $item->link();
  }
  return $breadcrumb;
}


function crumbs_preprocess_page(&$vars) {
  $trail = crumbs_get_trail();
  $vars['crumbs_trail'] = crumbs_get_trail();
  // Some modules call drupal_set_breadcrumb() with their own ideas of a
  // breadcrumb, and thus overwrite the breadcrumb set in crumbs_init(),
  // Thus, we need template_preprocess_page() to restore the crumbs crumb
  // for page rendering.
  $breadcrumb = crumbs_get_breadcrumb();
  $vars['breadcrumb'] = theme('breadcrumb', $breadcrumb);
}


function crumbs_get_trail() {
  return _crumbs_set_trail();
}


function _crumbs_set_trail($trail = NULL) {
  static $_trail;
  if (is_array($trail)) {
    $_trail = $trail;
  }
  else {
    return $_trail;
  }
}


function crumbs_get_breadcrumb() {
  return _crumbs_set_breadcrumb();
}


function _crumbs_set_breadcrumb($breadcrumb = NULL) {
  static $_breadcrumb;
  if (is_array($breadcrumb)) {
    $_breadcrumb = $breadcrumb;
  }
  else {
    return $_breadcrumb;
  }
}


function crumbs_build_trail($path, $set_warning = FALSE) {
  $finder = new _crumbs_TrailFinder;
  if ($set_warning) {
    $finder->setWarning();
  }
  $trail = $finder->buildTrail($path);
  $trail_wrapped = array();
  foreach ($trail as $path => $extra) {
    $trail_wrapped[$path] = new crumbs_ItemWrapper_theme($extra);
  }
  return $trail_wrapped;
}




class _crumbs_TrailFinder {
  protected $_implementations = array();
  protected $_order;
  protected $_objects;
  
  function __construct() {
    $this->_order = _crumbs_get_settings();
    $this->_objects = _crumbs_get_objects();
    $this->_implementations = _crumbs_get_objects_by_method();
  }
  
  function setWarning() {
    $undefined_order_keys = array();
    foreach ($this->_objects as $object_key => $object) {
      if (method_exists($object, 'getRuleTitles')) {
        $sub_keys = array_keys($object->getRuleTitles());
        if (is_array($sub_keys)) {
          foreach ($sub_keys as $i => $sub_key) {
            $order_key = "$object_key:$sub_key";
            if (!isset($this->_order[$order_key])) {
              $undefined_order_keys[$order_key] = TRUE;
            }
          }
        }
      }
      else if (!isset($this->_order[$object_key])) {
        $undefined_order_keys[$object_key] = TRUE;
      }
    }
    if (!empty($undefined_order_keys)) {
      drupal_set_message(t(
        'Crumbs: Some crumb creation rules are neither enabled nor disabled. Please visit !crumbs_config_link.<br/>(You might have to refresh the page, to make this message go away)',
        array(
          '!crumbs_config_link' => l('admin/build/crumbs', 'admin/build/crumbs'),
        )
      ), 'error', FALSE);
    }
  }
  
  function buildTrail($path) {
    $trail_reverse = array();
    $front_normal_path = drupal_get_normal_path(variable_get('site_frontpage', 'node'));
    $front_menu_item = menu_get_item($front_normal_path);
    while (strlen($path) && $path !== '<front>' && $path != $front_normal_path) {
      if (isset($trail_reverse[$path])) {
        // We found a loop! To prevent infinite recursion, we
        // remove the loopy paths from the trail and finish directly with <front>.
        while (isset($trail_reverse[$path])) {
          array_pop($trail_reverse);
        }
        break;
      }
      $menu_item = menu_get_item($path);
      $extra = (object)array(
        'title' => $menu_item['title'],
        'path' => $path,
        'item' => $menu_item,
        'alias' => drupal_get_path_alias($path),
      );
      $parent_path = $this->_findParentPath($path, $extra);
      if ($menu_item) {
        $this->_decorateItem($path, $extra, $trail_reverse);
        if (!$extra->skip_in_breadcrumb && $menu_item['access']) {
          $trail_reverse[$path] = $extra;
        }
      }
      if ($parent_path == $path) {
        // This is again a loop, but with just one step.
        // Not as evil as the other kind of loop.
        break;
      }
      $path = $parent_path;
    }
    unset($trail_reverse[$front_normal_path]);
    $trail_reverse['<front>'] = (object)array(
      'title' => $front_menu_item['title'],
      'path' => $front_normal_path,
      'item' => $front_menu_item,
    );
    $trail = array_reverse($trail_reverse);
    $this->_decorateTrail($trail);
    return $trail;
    return array();
  }
  
  
  protected function _findParentPath($path, stdClass $extra) {
    if ($extra->item) {
      $item_wrapped = new crumbs_ItemWrapper_find($extra);
      if ($extra->item['path']) {
        $path_method = 'find__' . preg_replace('/[^a-z0-9]/', '_', strtolower($extra->item['path']));
      }
      $candidates = array();
      foreach ($this->_order as $order_key => $enabled) {
        if ($enabled) {
          if (is_string($candidates[$order_key])) {
            return drupal_get_normal_path($candidates[$order_key]);
          }
          list($object_key, $sub_key) = explode(':', $order_key, 2);
          $object = $this->_objects[$object_key];
          if ($object) {
            $method = NULL;
            if ($path_method && method_exists($object, $path_method)) {
              $method = $path_method;
            } else if (method_exists($object, 'decorate')) {
              $method = 'decorate';
            }
            if ($method) {
              $parent_path = $object->$method($path, $item_wrapped, $sub_key);
              if (is_array($parent_path)) {
                foreach ($parent_path as $x_sub_key => $x_parent_path) {
                  $candidates["$object_key:$x_sub_key"] = $x_parent_path;
                }
              }
              else if (is_string($parent_path)) {
                return $candidates[$object_key] = $parent_path;
              }
            }
          }
          if (is_string($candidates[$order_key])) {
            return drupal_get_normal_path($candidates[$order_key]);
          }
        }
      }
    }
    // fallback: chop off the last fragment of the system path.
    $fragments = explode('/', $path);
    return implode('/', array_slice($fragments, 0, -1));
  }
  
  
  protected function _decorateItem($path, stdClass $extra) {
    if ($extra->item) {
      $item_wrapped = new crumbs_ItemWrapper_find($extra);
      if ($extra->item['path']) {
        $path_method = 'decorate__' . preg_replace('/[^a-z0-9]/', '_', strtolower($extra->item['path']));
      }
      foreach (array_reverse($this->_order) as $order_key => $enabled) {
        if ($enabled) {
          list($object_key, $sub_key) = explode(':', $order_key, 2);
          $object = $this->_objects[$object_key];
          if ($object) {
            $method = NULL;
            if ($path_method && method_exists($object, $path_method)) {
              $method = $path_method;
            } else if (method_exists($object, 'decorate')) {
              $method = 'decorate';
            }
            if ($method) {
              $object->$method($path, $item_wrapped, $sub_key);
            }
          }
        }
      }
    }
  }
  
  
  /**
   * This function is called when the full trail has been built.
   * Other modules get a chance to modify the title.
   */
  protected function _decorateTrail(array $trail) {
    $trail_wrapped = array();
    foreach ($trail as $path => $extra) {
      $trail_wrapped[$path] = new crumbs_ItemWrapper_decorate($extra);
    }
    foreach ($this->_order as $order_key => $enabled) {
      if ($enabled) {
        list($object_key, $sub_key) = explode(':', $order_key, 2);
        $object = $this->_objects[$object_key];
        if ($object && method_exists($object, 'decorateTrail')) {
          $object->decorateTrail($trail_wrapped, $sub_key);
        }
      }
    }
  }
}




function _crumbs_get_settings() {
  $settings = variable_get('crumbs', array());
  return is_array($settings) ? $settings : array();
}



function _crumbs_get_objects() {
  $sort_order = _crumbs_get_settings();
  $objects = array();
  $objects_enabled = array();
  $modules_enabled = array();
  foreach ($sort_order as $order_key => $enabled) {
    if ($enabled) {
      list($object_key, $sub_key) = explode(':', $order_key, 2);
      list($module, $instance_key) = explode('.', $object_key, 2);
      $objects_enabled[$object_key] = TRUE;
      $modules_enabled[$module] = TRUE;
    }
  }
  foreach (module_list(FALSE, TRUE) as $module) {
    $class = $module . '_class_CrumbsParentFinder';
    if (class_exists($class)) {
      if (method_exists($class, 'construct')) {
        // use the factory method.
        $result = call_user_func(array($class, 'construct'));
        if (is_object($result)) {
          $objects[$module] = $result;
        }
        else if (is_array($result)) {
          foreach ($result as $key => $object) {
            $objects["$module.$key"] = $object;
          }
        }
      } else {
        $objects[$module] = new $class;
      }
    }
  }
  foreach ($objects as $key => $object) {
    if (!is_object($object)) {
      unset($objects[$key]);
    }
  }
  return $objects;
}


function _crumbs_get_objects_by_method() {
  $sort_order = _crumbs_get_settings();
  $objects = _crumbs_get_objects();
  foreach ($sort_order as $key => $enabled) {
    if (!$enabled) {
      unset($objects[$key]);
    }
  }
  $objects_by_method = array('.' => array(), 'find' => array());
  foreach ($objects as $k => $object) {
    if (!is_object($object)) {
      continue;
    }
    $objects_by_method['.'][$k] = $object;
    foreach (get_class_methods($object) as $method) {
      $objects_by_method[$method][$k] = $object;
    }
  }
  return $objects_by_method;
}




