<?php

/**
 * @file
 *   Provides an API for building breadcrumbs.
 */

define('CRUMBS_SHOW_CURRENT_PAGE', 1);
define('CRUMBS_TRAILING_SEPARATOR', 2);
define('CRUMBS_SHOW_CURRENT_PAGE_SPAN', 5);
define('CRUMBS_SHOW_CURRENT_PAGE_LINK', 9);

// Register the module-provided autoloader if xautoload is missing.
if (!module_exists('xautoload')) {
  spl_autoload_register('_crumbs_autoload');
}

require_once __DIR__ . '/includes/crumbs.callbacks.inc';

/**
 * Crumbs autoloader.
 *
 * Takes the class name, strips the "crumbs_" prefix, converts underscores
 * to directory separators.
 *
 * For example, crumbs_InjectedAPI_describeMonoPlugin will be loaded
 * from lib/InjectedAPI/describeMonoPlugin.php.
 *
 * @param $class
 *   The name of the class to load.
 */
function _crumbs_autoload($class) {
  if (preg_match('#^crumbs_(.*)$#', $class, $m)) {
    $path = strtr($m[1], '_', '/');
    module_load_include('php', 'crumbs', "lib/$path");
  }
}


// Hook management
// -----------------------------------------------------------------------------

/**
 * Implements hook_module_implements_alter()
 */
function crumbs_module_implements_alter(&$implementations, $hook) {

  switch ($hook) {

    case 'theme_registry_alter':
    case 'permission':
    case 'menu':
    case 'themekey_properties':
    case 'theme':
      // These hook implementations live in crumbs.info.inc
      $implementations['crumbs'] = 'info';
      break;

    case 'block_info':
    case 'block_view':
      // These hook implementations live in crumbs.block.inc
      $implementations['crumbs'] = 'block';
      break;

    case 'help':
      $implementations['crumbs'] = 'help';
      break;

    case 'element_info':
      $implementations['crumbs'] = 'form';
      break;

    default:
      return;
  }

  require_once __DIR__ . '/crumbs.' . $implementations['crumbs'] . '.inc';
}


// Info hook implementations
// -----------------------------------------------------------------------------


// Page hook implementations
// -----------------------------------------------------------------------------

/**
 * Implements hook_preprocess_page().
 */
function crumbs_preprocess_page(&$vars) {

  $vars['crumbs_trail'] = crumbs()->page->trail;
  $vars['breadcrumb'] = crumbs()->page->breadcrumbHtml;
}


// Theme implementations
// -----------------------------------------------------------------------------

/**
 * Replacement theme callback for theme('breadcrumb').
 *
 * @param $variables
 * @return string
 *   Rendered breadcrumb HTML
 */
function crumbs_theme_breadcrumb($variables) {
  $breadcrumb = $variables['breadcrumb'];

  if (empty($breadcrumb)) {
    return;
  }

  // These settings may be missing, if theme('breadcrumb') is called from
  // somewhere outside of Crumbs, or if another module is messing with the theme
  // registry.
  $variables += array(
    'crumbs_trailing_separator' => FALSE,
    'crumbs_separator' => ' &raquo; ',
    'crumbs_separator_span' => FALSE,
  );

  $separator = $variables['crumbs_separator'];
  if ($variables['crumbs_separator_span']) {
    $separator = '<span class="crumbs-separator">' . $separator . '</span>';
  }

  $output = implode($separator, $breadcrumb);
  if ($variables['crumbs_trailing_separator']) {
    $output .= $separator;
  }

  $output = '<div class="breadcrumb">' . $output . '</div>';

  // Provide a navigational heading to give context for breadcrumb links to
  // screen-reader users. Make the heading invisible with .element-invisible.
  return '<h2 class="element-invisible">' . t('You are here') . '</h2>' . $output;
}

/**
 * Default theme implementation for theme('crumbs_breadcrumb_link').
 */
function theme_crumbs_breadcrumb_link(array $item) {
  if ('<nolink>' === $item['href']) {
    return check_plain($item['title']);
  }
  else {
    $options = isset($item['localized_options']) ? $item['localized_options'] : array();
    return l($item['title'], $item['href'], $options);
  }
}

/**
 * Default theme implementation for theme('crumbs_breadcrumb_current_page').
 */
function theme_crumbs_breadcrumb_current_page(array $variables) {
  $item = $variables['item'];
  switch ($variables['show_current_page']) {
    case CRUMBS_SHOW_CURRENT_PAGE_SPAN:
      return '<span class="crumbs-current-page">' . check_plain($item['title']) . '</span>';
    case CRUMBS_SHOW_CURRENT_PAGE_LINK:
      $options = isset($item['localized_options']) ? $item['localized_options'] : array();
      return l($item['title'], $item['href'], $options);
    default:
      return check_plain($item['title']);
  }
}


// Public API functions
// -----------------------------------------------------------------------------

/**
 * Returns the breadcrumb data for the current page.
 *
 * Gets the menu trail for the current page, and then uses it to build the
 * breadcrumb. Each link is themed separately, and then the links are passed
 * to theme('breadcrumb'), which returns the final rendered breadcrumb.
 *
 * Note: If the existing Drupal-provided breadcrumb is empty, then Crumbs
 * makes no effort to calculate its own, since it means that a module has
 * intentionally removed it.
 *
 * Breadcrumbs with one item are also ignored, to prevent the breadcrumb
 * from being shown on the frontpage.
 *
 * @return array
 *   An associative array with the following keys:
 *   - trail: An array containing the menu trail of the current page.
 *   - items: An array containing the built breadcrumb.
 *   - html: The rendered breadcrumb received from theme('breadcrumb').
 *   or FALSE if the breadcrumb could not be determined.
 */
function crumbs_get_breadcrumb_data() {
  return crumbs()->page->breadcrumbData;
}

/**
 * Returns the trail for the provided path.
 *
 * @param $path
 *   The path for which the trail is built. If NULL, the url of the
 *   current page is assumed.
 *
 * @return mixed
 *   An associative array containing the trail, with the paths as the keys, and
 *   the router items (as received from crumbs_get_router_item()) as the values.
 *
 * @see crumbs_TrailFinder
 */
function crumbs_get_trail($path = NULL) {
  if (!isset($path)) {
    $path = $_GET['q'];
  }
  return crumbs()->trails->getForPath($path);
}

/**
 * Returns a router item.
 *
 * This is a wrapper around menu_get_item() that sets additional keys
 * (route, link_path, alias, fragments).
 *
 * @param $path
 *   The path for which the corresponding router item is returned.
 *   For example, node/5.
 *
 * @return array
 *   The router item.
 */
function crumbs_get_router_item($path) {
  return crumbs()->router->getRouterItem($path);
}

/**
 * Chop off path fragments until we find a valid path.
 *
 * @param $path
 *   Starting path or alias
 * @param $depth
 *   Max number of fragments we try to chop off. -1 means no limit.
 */
function crumbs_reduce_path($path, $depth = -1) {
  return crumbs()->router->reducePath($path, $depth);
}

/**
 * Clean tokens so they are URL friendly.
 * Taken directly from pathauto_clean_token_values()
 *
 * @param $replacements
 *   An array of token replacements that need to be "cleaned" for use in the URL.
 * @param $data
 *   An array of objects used to generate the replacements.
 * @param $options
 *   An array of options used to generate the replacements.
 */
function crumbs_clean_token_values(&$replacements, $data = array(), $options = array()) {
  crumbs_Util::cleanTokenValues($replacements, $data, $options);
}


// Service cache
// -----------------------------------------------------------------------------

/**
 * Get the service with the given key.
 * If it does not exist, it will be lazy-created with all its dependencies.
 *
 * @param string $key
 *
 * @return crumbs_Container_LazyServices
 */
function crumbs($key = NULL) {
  static $cache = NULL;
  if (!isset($cache)) {
    $factory = new crumbs_ServiceFactory();
    $cache = new crumbs_Container_LazyServices($factory);
  }
  if (isset($key)) {
    return $cache->__get($key);
  }
  else {
    return $cache;
  }
}


// Admin tabledrag element
// -----------------------------------------------------------------------------

/**
 * Value callback for tabledrag element ($element['#value_callback']).
 */
function _crumbs_element_value_callback(&$element, $input = FALSE, $form_state = array()) {
  return _crumbs_element_object($element)->value_callback($element, $input, $form_state);
}

/**
 * Processor callback for tabledrag element ($element['#process']).
 * See form_process_checkboxes() for an example how these processors work.
 */
function _crumbs_element_process($element, $form_state) {
  return _crumbs_element_object($element)->process($element, $form_state);
}

/**
 * After build callback for tabledrag element ($element['#after_build']).
 */
function _crumbs_element_after_build($element, $form_state) {
  return _crumbs_element_object($element)->after_build($element, $form_state);
}

/**
 * Pre-render callback for tabledrag element ($element['#pre_render']).
 */
function _crumbs_element_pre_render($element) {
  return _crumbs_element_object($element)->pre_render($element);
}

/**
 * Validation callback for tabledrag element ($element['#element_validate']).
 */
function _crumbs_element_validate(&$element, &$form_state) {
  _crumbs_element_object($element)->validate($element, $form_state);
}

/**
 * Lazy-create an object representing the form element.
 * This allows to use methods instead of procedural callbacks.
 *
 * There will be one instance per element, so the object can actually hold some
 * state information.
 *
 * This mechanic would even make sense as a reusable module, but for now we just
 * have it crumbs-specific.
 */
function _crumbs_element_object(&$element) {
  if (!isset($element['#crumbs_element_object'])) {
    switch ($element['#type']) {
      case 'crumbs_weights_tabledrag':
        $obj = new crumbs_Admin_ElementObject_WeightsTabledrag($element);
        break;
      case 'crumbs_weights_textual':
        $obj = new crumbs_Admin_ElementObject_WeightsTextual($element);
        break;
      case 'crumbs_weights_expansible':
        $obj = new crumbs_Admin_ElementObject_WeightsExpansible($element);
        break;
      default:
        throw new Exception('Unknown element type "' . $element['#type'] . '".');
    }
    $element['#crumbs_element_object'] = $obj;
  }
  return $element['#crumbs_element_object'];
}

/**
 * Callback to be registered with ini_set('unserialize_callback_func', *)
 *
 * @param string $class
 * @throws crumbs_UnserializeException
 */
function _crumbs_unserialize_failure($class) {
  throw new crumbs_UnserializeException();
}
